created: 20190803110941234
modified: 20200409011249724
tags: Python
title: slice 切片
type: text/vnd.tiddlywiki

! 切片操作基本表达式
> `object[start_index:end_index:step]`

https://www.jianshu.com/p/15715d6f4dad

* step
*> 正负数均可，其绝对值大小决定了切取数据时的‘‘步长”
*> 正负号决定了`切取方向`
*> 正表示`从左往右`取值，负表示`从右往左`取值。
*> 当step省略时，默认为1，即从左往右以增量1取值。
*> `切取方向非常重要！`

* start_index
*> 表示起始索引（包含该索引本身）
*> 该参数省略时，表示从对象`端点`开始取值，
*> 至于是从“起点”还是从“终点”开始，则由step参数的正负决定
*> step为`正`从`起点`开始，为`负`从`终点`开始。

* end_index
*> 表示终止索引（不包含该索引本身）
*> 该参数省略时，表示一直取到数据“端点”，
*> 至于是到“起点”还是到“终点”，同样由step参数的正负决定
*> step为`正`从`起点`开始，为`负`从`终点`开始。

!! 例子

```python
array = range(10)
# [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
```

| !值 | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 |
| !正索引 | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 |
| !负索引 | -10 | -9 | -8 | -7 | -6 | -5 | -4 | -3 | -2 | -1 |

* 1. 切取单个值
```python
array[4]
# 4
array[-4]
# 6
```

* 2. 切取完整对象
```python
array[:]
# 从左到右
# [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
array[::]
# 从左到右
# [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
array[::-1]
# 从右到左
# [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]
```

* 3. start_index和end_index全为正（+）索引的情况
```python
array[1:6]
# [1, 2, 3, 4, 5]
# step=1，从左往右取值
# start_index=1到end_index=6同样表示从左往右取值。

array[1:6:-1]
# []
# 输出为空列表，说明没取到数据。
# step=-1，决定了从右往左取值
# start_index=1到end_index=6决定了从左往右取值
# 两者矛盾，所以为空。

a[6:1]
# []
# 同样输出为空列表。
# step=1，决定了从左往右取值
# start_index=6到end_index=1决定了从右往左取值
# 两者矛盾，所以为空。

a[:6]
# [0, 1, 2, 3, 4, 5]
# step=1，从左往右取值，从“起点”开始一直取到end_index=6。

a[:6:-1]
# [9, 8, 7]
# step=-1，从右往左取值，从“终点”开始一直取到end_index=6。

a[6:]
# [6, 7, 8, 9]
# step=1，从左往右取值，从start_index=6开始，一直取到“终点”。

a[6:]
# [6, 7, 8, 9]
# step=1，从左往右取值，从start_index=6开始，一直取到“终点”。
```

* 4. start_index和end_index全为负（-）索引的情况

```python
a[-1:-6]
# []
# step=1，从左往右取值
# start_index=-1到end_index=-6决定了从右往左取值，两者矛盾，所以为空。

a[-1:-6:-1]
# [9, 8, 7, 6, 5]
# step=-1，从右往左取值
# start_index=-1到end_index=-6同样是从右往左取值。

a[-6:-1]
# [4, 5, 6, 7, 8]
# step=1，从左往右取值，而start_index=-6到end_index=-1同样是从左往右取值。

a[:-6]
# [0, 1, 2, 3]
# step=1，从左往右取值，从“起点”开始一直取到end_index=-6。

a[:-6:-1]
# [9, 8, 7, 6, 5]
# step=-1，从右往左取值，从“终点”开始一直取到end_index=-6。

a[-6:]
# [4, 5, 6, 7, 8, 9]
# step=1，从左往右取值，从start_index=-6开始，一直取到“终点”。

a[-6::-1]
# [4, 3, 2, 1, 0]
# step=-1，从右往左取值，从start_index=-6开始，一直取到“起点”。

```

* 5. start_index和end_index正（+）负（-）混合索引的情况

```python
>>>a[1:-6]
>>> [1, 2, 3]
start_index=1在end_index=-6的左边，因此从左往右取值，而step=1同样决定了从左往右取值，因此结果正确
```